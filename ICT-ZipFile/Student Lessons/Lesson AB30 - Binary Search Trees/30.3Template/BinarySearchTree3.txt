import java.util.*;

/**
 *  Implements a Binary Search Tree
 *
 * @author     G. Peck
 * @created    July 2, 2003
 *
 * Modified by Jason Quesenberry and Nancy Quesenberry
 * February 9, 2006
 */

public class BinarySearchTree{
  private TreeNode myRoot;

  public BinarySearchTree(){
   
  }

  public void insert(Comparable next){
  // post: next added to tree so as to preserve binary search tree
   
  }

  private TreeNode insertHelper(TreeNode root, Comparable next){
  // pre : root points to a binary search tree
  // post: next added to tree so as to preserve binary search tree
    
  }

  public Object find(Comparable target){
    
  }

  private Object findHelper(TreeNode root, Comparable target){
    
  }

  public int countNodes(){
   
  }

  private int countNodesHelper(TreeNode root){
    
  }

  public void printInorder(){
  // post: prints the data fields of the tree, one per line  
 
  }

  private void printInorderHelper(TreeNode root){
  // pre : root points to a binary search tree
  // post: prints the data fields of the tree using an inorder traversal  
  
    }
  }

  public void printPreorder(){
  // post: prints the data fields of the tree, one per line  
   
  }

  private void printPreorderHelper(TreeNode root){
  // pre : root points to a binary search tree
  // post: prints the data fields of the tree using an inorder traversal  
    
    }
  }

  public void printPostorder(){
  // post: prints the data fields of the tree, one per line  
   
  }

  private void printPostorderHelper(TreeNode root){
  // pre : root points to a binary search tree
  // post: prints the data fields of the tree using an inorder traversal  
  
    }
  }

  public void delete(Comparable target){
  // post: deletes a node with data equal to target, if present,
  //       preserving binary search tree property
    

  private TreeNode deleteHelper(TreeNode node, Comparable target){
  // pre : node points to a non-empty binary search tree
  // post: deletes a node with data equal to target, if present,
  //       preserving binary search tree property  
    
  }

  private TreeNode deleteTargetNode(TreeNode target){
  // pre : target points to TreeNode to be deleted
  // post: returns a reference to a subtree with the target
  //       TreeNode removed or null if the TreeNode is a leaf
    
  }


  private TreeNode deleteTargetNode(TreeNode target){
  // pre : target points to TreeNode to be deleted
  // post: returns a reference to a subtree with the target
  //       TreeNode removed or null if the TreeNode is a leaf
  
   
    
  }

  public int countLeaves(){
    
  }

  private int countLeaves (TreeNode root){
   
  }

  public int height(){
   
  }

  private int height (TreeNode root){
  
  }

  public int width(){
  
  }

  private int width (TreeNode root){
   

  }
  
  private int max (int a, int b)
  {
   
  }

  public void clearTree()
  {
   
  }

  public void interchange()
  // post: tree becomes a mirror image of itself
  {
   
  }

  private void interchange(TreeNode root)
  {
    
  }

  public boolean isAncestor(Comparable ancestor, Comparable descendant){
  // post: returns true if descendant is a "child" of ancestor; false otherwise
  //       i.e., true if descendant belongs to ancestor's subtree 
    
  }

  public boolean isAncestor(TreeNode root, Comparable a, Comparable d){
    if (findPtr(findPtr(root, a), d) != null)
      return true;
    else
      return false;
  }

  private TreeNode findPtr(TreeNode root, Comparable target){
   
  }

  public void printLevel(int level)
  // post: prints the data fields of the tree, one per line
  {
   
  }

  private void printLevel(TreeNode root, int level)
  {
    
  }


}