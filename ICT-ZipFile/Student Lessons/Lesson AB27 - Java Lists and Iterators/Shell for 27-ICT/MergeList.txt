import java.util.*;
import java.io.*;

/**
 *  Implements a recursive mergesort on a LinkedList data type
 *
 * @author     G. Peck
 * @created    July 18, 2002
 *
 * Modified by Jason Quesenberry and Nancy Quesenberry
 * February 9, 2006
 */
public class MergeList{
  private  Scanner inFile;
  private String myFile;

  /**
   *  Open a file containing id/inventory pairs of data
   *
   * @param  fileName  File to be opened
   */
  public MergeList(String fileName){
    
  }

  /**
   *  Reads a file containing id/inv data pairs. The first line of the
   *  file contains the number of id/inventory integer pairs listed on
   *  subsequent lines.
   *
   * @param  list  Reference to LinkedList to which data will be added
   */
  public void readData(LinkedList list){
    int id;
    int inv;

  	try{
  	


    	}
    }catch(IOException i){
    	System.out.println("Error: " + i.getMessage());
    }
  }

  /**
   *  Prints contents of list
   *
   * @param  list  linked list to be printed
   */
  public void printList(LinkedList list){
    

    System.out.printf("%5s%16s","Id","Inventory\n");
    
    }
    System.out.println();
  }

  /**
   *  Splits listA into two parts. listA retains the first
   *  half of the list, listB contains the last half of
   *  the original list.
   *
   * @param  listA    Original list. reduced by half after split.
   * @param  listB    Contains last half of the original list
   */
  public void split(LinkedList listA, LinkedList listB){
    



    }
  }

  /**
   *  Two linked lists listA and listB are merged into a single
   *  linked list mergedList. They are placed in mergedList starting
   *  with the smallest item on either list and continue working up to
   *  to largest item.
   *
   * @param  listA   LinkedList in nondecreasing order
   * @param  listB   LinkedList in nondecreasing order
   * @return         List  containing all the values from lists listA
   *                 and listB, in nondecreasing order
   */
  public LinkedList merge(LinkedList listA, LinkedList listB){
    // make sure the target list is empty
    LinkedList <Item> mergedList = new LinkedList <Item>();

  


    // start at mergedList left and right item
    


    // continue until either left or right list has no more value to add
   

      // use <= instead of < so if duplicate take from left so sort is stable
     
      

    // One of the next two while loops will execute.  It will be the one with some values
    // left on the list.
    
  }

  /**
   *  The linked list is returned in sorted order.
   *  Sorted order has the smallest item first and the largest item
   *  last. The ordering is determined by the order defined in the
   *  Comparable class. The method uses the merge sort technique and
   *  must be recursive.
   *
   * @param  listA  LinkedList to be sorted
   * @return        LinkedList in sorted (nondecreasing) order
   */
  public LinkedList mergeSort(LinkedList <Item> listA){
    




    // Split the list in half.  If uneven then make left one larger.
    split(listA, listB);

    return merge(mergeSort(listA), mergeSort(listB));
  }

  /**
   *  Reverses the order of a list
   *
   * @param  list  LinkedList to be reversed
   * @return       List in reverse order
   */
  public LinkedList reverseList(LinkedList <Item>list){
    


    

  }
}
